rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funções de utilidade para verificação de permissões
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Regras para coleção de usuários
    match /users/{userId} {
      // Usuários podem ler e atualizar seus próprios dados
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      // Usuários podem criar seus próprios perfis durante o registro
      allow create: if isAuthenticated() && isOwner(userId);
      // Usuários podem atualizar seus próprios dados
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      // Apenas administradores podem excluir usuários
      allow delete: if isAdmin();
      
      // Subcoleção de histórico de cálculos
      match /calculationHistory/{historyId} {
        // Usuários podem ler, criar, atualizar e excluir seu próprio histórico
        allow read, write: if isAuthenticated() && isOwner(userId);
        // Administradores têm acesso total
        allow read, write: if isAdmin();
      }
    }
    
    // Regras para coleção de logs de acesso (nova)
    match /accessLogs/{logId} {
      // Qualquer usuário autenticado pode criar logs de acesso
      allow create: if isAuthenticated();
      // Apenas administradores podem ler logs de acesso (privacidade)
      allow read: if isAdmin();
      // Ninguém pode atualizar ou excluir logs (integridade dos dados)
      allow update, delete: if false;
    }
    
    // Regras para coleção Logs (existente - manter compatibilidade)
    match /Logs/{logId} {
      // Qualquer usuário autenticado pode criar logs
      allow create: if isAuthenticated();
      // Apenas administradores podem ler logs (privacidade)
      allow read: if isAdmin();
      // Ninguém pode atualizar ou excluir logs (integridade dos dados)
      allow update, delete: if false;
    }
    
    // Regras para coleção logs (minúscula - compatibilidade adicional)
    match /logs/{logId} {
      // Qualquer usuário autenticado pode criar logs
      allow create: if isAuthenticated();
      // Apenas administradores podem ler logs (privacidade)
      allow read: if isAdmin();
      // Ninguém pode atualizar ou excluir logs (integridade dos dados)
      allow update, delete: if false;
    }
    
    // Regras para cálculos e outras coleções específicas do aplicativo
    match /calculations/{docId} {
      // Usuários autenticados podem ler cálculos
      allow read: if isAuthenticated();
      // Usuários autenticados podem criar cálculos
      allow create: if isAuthenticated();
      // Apenas o criador ou um administrador pode atualizar ou excluir
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Regras para coleção de fórmulas matemáticas
    match /formulas/{formulaId} {
      // Usuários podem ler apenas suas próprias fórmulas
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
      
      // Usuários podem criar fórmulas com validações de segurança
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        isValidFormulaData(request.resource.data);
      
      // Usuários podem atualizar apenas suas próprias fórmulas
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId &&
        isValidFormulaUpdate(request.resource.data);
      
      // Usuários podem excluir (soft delete) apenas suas próprias fórmulas
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Função para validar dados de fórmula na criação
    function isValidFormulaData(data) {
      return data.keys().hasAll(['name', 'expression', 'userId', 'createdAt', 'isActive']) &&
        data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
        data.expression is string && data.expression.size() > 0 && data.expression.size() <= 1000 &&
        data.userId is string &&
        data.isActive is bool &&
        data.createdAt is timestamp;
    }
    
    // Função para validar atualizações de fórmula
    function isValidFormulaUpdate(data) {
      return (!('name' in data) || (data.name is string && data.name.size() > 0 && data.name.size() <= 100)) &&
        (!('expression' in data) || (data.expression is string && data.expression.size() > 0 && data.expression.size() <= 1000)) &&
        (!('userId' in data) || data.userId == resource.data.userId) &&
        data.updatedAt is timestamp;
    }

    // Regras para coleção de FAQ
    match /faq/{faqId} {
      // Qualquer usuário autenticado pode ler itens do FAQ
      allow read: if isAuthenticated();
      
      // Apenas administradores podem criar, atualizar e excluir itens do FAQ
      allow create, update, delete: if isAdmin();
    }

    // Regras para outras coleções que podem estar faltando
    match /categories/{categoryId} {
      // Usuários autenticados podem ler categorias
      allow read: if isAuthenticated();
      
      // Apenas administradores podem criar categorias
      allow create: if isAuthenticated() && isAdmin();
      
      // Apenas o criador ou admin pode atualizar/excluir
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.createdBy || isAdmin());
    }
  }
}